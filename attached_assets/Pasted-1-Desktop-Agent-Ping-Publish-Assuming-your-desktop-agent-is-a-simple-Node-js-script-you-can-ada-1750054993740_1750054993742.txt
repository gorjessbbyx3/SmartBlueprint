1. Desktop Agent: Ping & Publish
Assuming your desktop agent is a simple Node.js script (you can adapt to Python if you prefer):

js
Copy
Edit
// agent/ping_agent.js
import ping from 'ping';
import WebSocket from 'ws';

const WS_URL = 'ws://localhost:8000/ws/metrics';
const TARGETS = ['192.168.1.1', '192.168.1.254']; // your APs/gateway IPs
const INTERVAL_MS = 5000;

async function measurePing() {
  const results = {};
  for (let host of TARGETS) {
    const res = await ping.promise.probe(host, { timeout: 2 });
    results[host] = res.alive ? res.time : null; // time in ms
  }
  return results;
}

async function start() {
  const ws = new WebSocket(WS_URL);
  ws.on('open', () => {
    console.log('Ping agent connected');
    setInterval(async () => {
      const pingData = await measurePing();
      ws.send(JSON.stringify({ type: 'ping', timestamp: Date.now(), ping: pingData }));
    }, INTERVAL_MS);
  });
  ws.on('close', () => console.log('WS closed, retrying in 5s') && setTimeout(start,5000));
}

start();
Install dependencies in your agent folder:

bash
Copy
Edit
cd agent
npm install ping ws
Run it alongside your other agents:

bash
Copy
Edit
node ping_agent.js
2. Backend: Ingest Ping Metrics & Fuse Into AI
2.1 Extend Your WebSocket Handler
In your FastAPI app (or similar), make /ws/alerts also accept ping‐type messages:

python
Copy
Edit
# backend/app/main.py (excerpt)
from fastapi import FastAPI, WebSocket
import json

app = FastAPI()
# reuse your existing ConnectionManager
manager = ConnectionManager()

@app.websocket("/ws/metrics")
async def ws_metrics(ws: WebSocket):
    await ws.accept()
    while True:
        msg = await ws.receive_text()           # JSON from ping_agent
        data = json.loads(msg)
        if data.get("type") == "ping":
            # store it in a global or pass to your pipeline
            latest_ping.update(data["ping"])   # e.g. a dict {host: ms, …}
        # you can also broadcast to front-end if desired
2.2 Incorporate Ping Into Event Pipeline
Modify your /ingest/event handler to pull in latest_ping when you compute features:

python
Copy
Edit
# backend/app/main.py (continued)
from app.config import PING_WEIGHT

# Shared state (simple example)
latest_ping: dict[str, float] = {}

@app.post("/ingest/event")
async def ingest_event(payload: CSIPayload):
    # … your CSI & CV steps …
    ping_features = [latest_ping.get(host, None) for host in PING_TARGETS]
    # build full feature vector for your regressor/AI
    features = csi_features + ping_features
    coord = COORD_REGRESSOR.predict([features])[0]  # e.g. [x,y]
    # update heatmap, anomaly detection etc.
    # broadcast both new location and ping metrics to front-end
    event = {
      "type": "update",
      "coord": coord,
      "ping": latest_ping,
      "timestamp": time.time()
    }
    await manager.broadcast(event)
    return {"coord":coord}
In your config.py define:

python
Copy
Edit
PING_TARGETS = ["192.168.1.1", "192.168.1.254"]
2.3 Re­train Your ML Model
If you’re using a scikit‐learn regressor on calibration data, augment your training set:

python
Copy
Edit
# backend/app/train_model.py
import json, numpy as np
from sklearn.ensemble import RandomForestRegressor

# load CSI fingerprint data + ping logs for calibration points
# each entry: { "sig": [...], "ping": [ms1, ms2], "coord": [x,y] }
data = json.load(open("calibration_records.json"))
X = [d["sig"] + d["ping"] for d in data]
y = [d["coord"] for d in data]

model = RandomForestRegressor(n_estimators=100).fit(X, y)
import joblib; joblib.dump(model, "app/models/coord_regressor.pkl")
3. Web App: Display & Monitor Ping
3.1 Listen for Ping in React
In your React dashboard, connect to /ws/metrics (or reuse /ws/alerts if you merged streams):

jsx
Copy
Edit
// src/App.js (excerpt)
useEffect(() => {
  const ws = new WebSocket("ws://localhost:8000/ws/metrics");
  ws.onmessage = evt => {
    const msg = JSON.parse(evt.data);
    if (msg.type === "update") {
      setCoord(msg.coord);
      setPing(msg.ping);
    }
  };
  return () => ws.close();
}, []);
3.2 Add a Ping Panel Component
jsx
Copy
Edit
// src/components/PingMonitor.jsx
import React from "react";

export default function PingMonitor({ ping }) {
  return (
    <div className="ping-monitor">
      <h3>Ping Times</h3>
      <ul>
        {Object.entries(ping).map(([host, ms]) => (
          <li key={host}>
            {host}: {ms == null ? "N/A" : `${ms.toFixed(1)} ms`}
          </li>
        ))}
      </ul>
    </div>
  );
}
Include it in your App.js:

jsx
Copy
Edit
<PingMonitor ping={ping} />
4. Putting It All Together
Desktop Agent → measures ping to your APs every 5 s and ws.send to your server

Server → holds latest_ping, fuses it into your AI model, re­estimates location, anomaly score, and broadcasts both coord and ping

Web UI → shows real-time ping metrics alongside heatmap and alerts

By fusing active‐ping distances with your existing CSI-based mapping, you’ll get a more drift-resistant, self-correcting system—available even on devices that can’t do 802.11mc.








name: SmartBlueprint Pro CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test-native-core:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.16'
    
    - name: Configure CMake (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd native-core
        cmake -B build -DCMAKE_BUILD_TYPE=Release
    
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        cd native-core
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022"
    
    - name: Build Native Core
      run: |
        cd native-core
        cmake --build build --config Release
    
    - name: Test Native Core
      run: |
        cd native-core/build
        ctest --output-on-failure

  test-android:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Run Android Tests
      run: |
        cd mobile/android
        ./gradlew test
    
    - name: Build Android APK
      run: |
        cd mobile/android
        ./gradlew assembleRelease

  test-ios:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Build iOS App
      run: |
        cd mobile/ios
        xcodebuild -project SmartBlueprint.xcodeproj -scheme SmartBlueprint -destination 'platform=iOS Simulator,name=iPhone 14' build
    
    - name: Run iOS Tests
      run: |
        cd mobile/ios
        xcodebuild test -project SmartBlueprint.xcodeproj -scheme SmartBlueprint -destination 'platform=iOS Simulator,name=iPhone 14'

  test-python-services:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r pyproject.toml || echo "No requirements file found"
    
    - name: Run Python Tests
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3

  build-desktop-apps:
    needs: [test-native-core]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.16'
    
    - name: Build Desktop Application
      run: |
        cd native-core
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
    
    - name: Package Application (Linux)
      if: runner.os == 'Linux'
      run: |
        cd native-core/build
        cpack -G DEB
        cpack -G TGZ
    
    - name: Package Application (Windows)
      if: runner.os == 'Windows'
      run: |
        cd native-core/build
        cpack -G NSIS
        cpack -G ZIP
    
    - name: Package Application (macOS)
      if: runner.os == 'macOS'
      run: |
        cd native-core/build
        cpack -G DragNDrop
        cpack -G TGZ
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: desktop-app-${{ runner.os }}
        path: native-core/build/*.* 

  release:
    if: github.event_name == 'release'
    needs: [test-native-core, test-android, test-ios, test-python-services, build-desktop-apps]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release Assets
      run: |
        mkdir -p release-assets
        cp desktop-app-*/* release-assets/ || true
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}